use ndarray::prelude::{
    s,
    Array4,
    Array6,
};

fn im2col(input_data: &Array4<f64>, filter_h: usize, filter_w: usize, stride: usize, pad: usize) -> Array4<f64>{
    let (N, C, H, W) = input_data.dim();
    let out_h = (H + 2*pad - filter_h) / stride + 1;
    let out_w = (W + 2*pad - filter_w) / stride + 1;

    let img = pad_array4(input_data, [(0,0), (0,0), (pad, pad), (pad, pad)]);
    let (N, C, H, W) = input_data.dim();
    let mut col = Array4::<f64>::zeros((N, C, out_h*out_w, filter_h*filter_w));

    for y in 0..filter_h {
        for x in 0..filter_w {
            let col_col_index = y * filter_w + x;
            let mut c = col.slice_mut(s![.., .., col_col_index..=col_col_index, ..]);

            let i = img.slice(s![.., ..,  y..=H-filter_h+y;stride, x..=W-filter_w+x;stride]);

            let shaped_i = i.to_owned().into_shared().reshape(c.shape());
            c.assign(&shaped_i);
        }
    }

    return col;
}

fn pad_array4(data: &Array4<f64>, pad: [(usize, usize); 4]) -> Array4<f64> {
    let paded_shape = [
        data.shape()[0] + pad[0].0 + pad[0].1,
        data.shape()[1] + pad[1].0 + pad[1].1,
        data.shape()[2] + pad[2].0 + pad[2].1,
        data.shape()[3] + pad[3].0 + pad[3].1,
    ];
    let mut paded = Array4::<f64>::zeros(paded_shape);
    let mut paded_data = paded.slice_mut(
        s![
            pad[0].0..paded.shape()[0]-pad[0].1,
            pad[1].0..paded.shape()[1]-pad[1].1,
            pad[2].0..paded.shape()[2]-pad[2].1,
            pad[3].0..paded.shape()[3]-pad[3].1,
        ]
    );

    paded_data.assign(data);

    return paded;
}

#[cfg(test)]
mod test {
    use super::*;

    use ndarray::prelude::Array;

    #[test]
    fn test_im2col() {
        let data = Array::from_shape_vec(
            (1,2,7,7),
            vec![
                01f64, 02f64, 03f64, 04f64, 05f64, 06f64, 07f64,
                11f64, 12f64, 13f64, 14f64, 15f64, 16f64, 17f64,
                21f64, 22f64, 23f64, 24f64, 25f64, 26f64, 27f64,
                31f64, 32f64, 33f64, 34f64, 35f64, 36f64, 37f64,
                41f64, 42f64, 43f64, 44f64, 45f64, 46f64, 47f64,
                51f64, 52f64, 53f64, 54f64, 55f64, 56f64, 57f64,
                61f64, 62f64, 63f64, 64f64, 65f64, 66f64, 67f64,

                101f64, 102f64, 103f64, 104f64, 105f64, 106f64, 107f64,
                111f64, 112f64, 113f64, 114f64, 115f64, 116f64, 117f64,
                121f64, 122f64, 123f64, 124f64, 125f64, 126f64, 127f64,
                131f64, 132f64, 133f64, 134f64, 135f64, 136f64, 137f64,
                141f64, 142f64, 143f64, 144f64, 145f64, 146f64, 147f64,
                151f64, 152f64, 153f64, 154f64, 155f64, 156f64, 157f64,
                161f64, 162f64, 163f64, 164f64, 165f64, 166f64, 167f64,
            ]
        ).ok().unwrap();

        let expect = Array::from_shape_vec(
            (1,2,9,9),
            vec![
                01f64, 03f64, 05f64, 21f64, 23f64, 25f64, 41f64, 43f64, 45f64,
                02f64, 04f64, 06f64, 22f64, 24f64, 26f64, 42f64, 44f64, 46f64,
                03f64, 05f64, 07f64, 23f64, 25f64, 27f64, 43f64, 45f64, 47f64,
                11f64, 13f64, 15f64, 31f64, 33f64, 35f64, 51f64, 53f64, 55f64,
                12f64, 14f64, 16f64, 32f64, 34f64, 36f64, 52f64, 54f64, 56f64,
                13f64, 15f64, 17f64, 33f64, 35f64, 37f64, 53f64, 55f64, 57f64,
                21f64, 23f64, 25f64, 41f64, 43f64, 45f64, 61f64, 63f64, 65f64,
                22f64, 24f64, 26f64, 42f64, 44f64, 46f64, 62f64, 64f64, 66f64,
                23f64, 25f64, 27f64, 43f64, 45f64, 47f64, 63f64, 65f64, 67f64,

                101f64, 103f64, 105f64, 121f64, 123f64, 125f64, 141f64, 143f64, 145f64,
                102f64, 104f64, 106f64, 122f64, 124f64, 126f64, 142f64, 144f64, 146f64,
                103f64, 105f64, 107f64, 123f64, 125f64, 127f64, 143f64, 145f64, 147f64,
                111f64, 113f64, 115f64, 131f64, 133f64, 135f64, 151f64, 153f64, 155f64,
                112f64, 114f64, 116f64, 132f64, 134f64, 136f64, 152f64, 154f64, 156f64,
                113f64, 115f64, 117f64, 133f64, 135f64, 137f64, 153f64, 155f64, 157f64,
                121f64, 123f64, 125f64, 141f64, 143f64, 145f64, 161f64, 163f64, 165f64,
                122f64, 124f64, 126f64, 142f64, 144f64, 146f64, 162f64, 164f64, 166f64,
                123f64, 125f64, 127f64, 143f64, 145f64, 147f64, 163f64, 165f64, 167f64,
            ]
        ).ok().unwrap();

        let col = im2col(&data, 3, 3, 2, 0);

        assert_eq!(col, expect);

    }

    #[test]
    fn test_pad_array4() {
        let data = Array::from_shape_vec(
            (2,2,3,3),
            vec![
                // [
                    // [
                        1f64, 2f64, 3f64,
                        4f64, 5f64, 6f64,
                        7f64, 8f64, 9f64,
                    // ]
                    // [
                        9f64, 8f64, 7f64,
                        6f64, 5f64, 4f64,
                        3f64, 2f64, 1f64,
                    // ]
                // ]
                // [
                    // [
                        11f64, 12f64, 13f64,
                        14f64, 15f64, 16f64,
                        17f64, 18f64, 19f64,
                    // ]
                    // [
                        19f64, 18f64, 17f64,
                        16f64, 15f64, 14f64,
                        13f64, 12f64, 11f64,
                    // ]
                // ]
            ]
        ).ok().unwrap();

        let expect_data = Array::from_shape_vec(
            (5,5,6,6),
            vec![
                // [ pad
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                // ]
                // [
                    // [ pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [ pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 1f64, 2f64, 3f64, 0f64,
                        0f64, 0f64, 4f64, 5f64, 6f64, 0f64,
                        0f64, 0f64, 7f64, 8f64, 9f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 9f64, 8f64, 7f64, 0f64,
                        0f64, 0f64, 6f64, 5f64, 4f64, 0f64,
                        0f64, 0f64, 3f64, 2f64, 1f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                    // ]
                    // [ pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                /*],*/
                /*[*/
                    // [ pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [ pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 11f64, 12f64, 13f64, 0f64,
                        0f64, 0f64, 14f64, 15f64, 16f64, 0f64,
                        0f64, 0f64, 17f64, 18f64, 19f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 19f64, 18f64, 17f64, 0f64,
                        0f64, 0f64, 16f64, 15f64, 14f64, 0f64,
                        0f64, 0f64, 13f64, 12f64, 11f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64, // pad
                    // ]
                    // [ pad
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                /*]*/
                // [ pad
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                // ]
                // [ pad
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                    // [
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                        0f64, 0f64, 0f64, 0f64, 0f64, 0f64,
                    // ]
                // ]
            ]
        ).ok().unwrap();

        let paded = pad_array4(&data, [(1, 2), (2, 1), (1, 2), (2, 1)]);

        assert_eq!(paded, expect_data);
    }
}
